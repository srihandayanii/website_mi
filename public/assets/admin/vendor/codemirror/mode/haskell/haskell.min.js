(function(a){if(typeof exports=="object"&&typeof module=="object"){a(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],a)}else{a(CodeMirror)}}})(function(a){a.defineMode("haskell",function(b,g){function o(u,t,s){t(s);return s(u,t)}var k=/[a-z_]/;var f=/[A-Z]/;var c=/\d/;var d=/[0-9A-Fa-f]/;var j=/[0-7]/;var e=/[a-z_A-Z0-9'\xa1-\uffff]/;var p=/[-!#$%&*+.\/<=>?@\\^|~:]/;var l=/[(),;[\]`{}]/;var r=/[ \t\v\f]/;function i(v,u){if(v.eatWhile(r)){return null}var s=v.next();if(l.test(s)){if(s=="{"&&v.eat("-")){var w="comment";if(v.eat("#")){w="meta"}return o(v,u,h(w,1))}return null}if(s=="'"){if(v.eat("\\")){v.next()}else{v.next()}if(v.eat("'")){return"string"}return"error"}if(s=='"'){return o(v,u,n)}if(f.test(s)){v.eatWhile(e);if(v.eat(".")){return"qualifier"}return"variable-2"}if(k.test(s)){v.eatWhile(e);return"variable"}if(c.test(s)){if(s=="0"){if(v.eat(/[xX]/)){v.eatWhile(d);return"integer"}if(v.eat(/[oO]/)){v.eatWhile(j);return"number"}}v.eatWhile(c);var w="number";if(v.match(/^\.\d+/)){w="number"}if(v.eat(/[eE]/)){w="number";v.eat(/[-+]/);v.eatWhile(c)}return w}if(s=="."&&v.eat(".")){return"keyword"}if(p.test(s)){if(s=="-"&&v.eat(/-/)){v.eatWhile(/-/);if(!v.eat(p)){v.skipToEnd();return"comment"}}var w="variable";if(s==":"){w="variable-2"}v.eatWhile(p);return w}return"error"}function h(t,s){if(s==0){return i}return function(x,w){var v=s;while(!x.eol()){var u=x.next();if(u=="{"&&x.eat("-")){++v}else{if(u=="-"&&x.eat("}")){--v;if(v==0){w(i);return t}}}}w(h(t,v));return t}}function n(u,t){while(!u.eol()){var s=u.next();if(s=='"'){t(i);return"string"}if(s=="\\"){if(u.eol()||u.eat(r)){t(m);return"string"}if(u.eat("&")){}else{u.next()}}}t(i);return"error"}function m(t,s){if(t.eat("\\")){return o(t,s,n)}t.next();s(i);return"error"}var q=(function(){var u={};function t(w){return function(){for(var x=0;x<arguments.length;x++){u[arguments[x]]=w}}}t("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");t("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>");t("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");t("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");t("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var s=g.overrideKeywords;if(s){for(var v in s){if(s.hasOwnProperty(v)){u[v]=s[v]}}}return u})();return{startState:function(){return{f:i}},copyState:function(t){return{f:t.f}},token:function(u,s){var v=s.f(u,function(t){s.f=t});var x=u.current();return q.hasOwnProperty(x)?q[x]:v},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});a.defineMIME("text/x-haskell","haskell")});