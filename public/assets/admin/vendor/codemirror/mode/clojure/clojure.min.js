(function(a){if(typeof exports=="object"&&typeof module=="object"){a(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],a)}else{a(CodeMirror)}}})(function(a){a.defineMode("clojure",function(r){var e="builtin",h="comment",v="string",g="string-2",b="atom",q="number",d="bracket",m="keyword",x="variable";var j=r.indentUnit||2;var p=r.indentUnit||2;function o(A){var z={},B=A.split(" ");for(var y=0;y<B.length;++y){z[B[y]]=true}return z}var c=o("true false nil");var n=o("defn defn- def def- defonce defmulti defmethod defmacro defstruct deftype defprotocol defrecord defproject deftest slice defalias defhinted defmacro- defn-memo defnk defnk defonce- defunbound defunbound- defvar defvar- let letfn do case cond condp for loop recur when when-not when-let when-first if if-let if-not . .. -> ->> doto and or dosync doseq dotimes dorun doall load import unimport ns in-ns refer try catch finally throw with-open with-local-vars binding gen-class gen-and-load-class gen-and-save-class handler-case handle");var f=o("* *' *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* *command-line-args* *compile-files* *compile-path* *compiler-options* *data-readers* *e *err* *file* *flush-on-newline* *fn-loader* *in* *math-context* *ns* *out* *print-dup* *print-length* *print-level* *print-meta* *print-readably* *read-eval* *source-path* *unchecked-math* *use-context-classloader* *verbose-defrecords* *warn-on-reflection* + +' - -' -> ->> ->ArrayChunk ->Vec ->VecNode ->VecSeq -cache-protocol-fn -reset-methods .. / < <= = == > >= EMPTY-NODE accessor aclone add-classpath add-watch agent agent-error agent-errors aget alength alias all-ns alter alter-meta! alter-var-root amap ancestors and apply areduce array-map aset aset-boolean aset-byte aset-char aset-double aset-float aset-int aset-long aset-short assert assoc assoc! assoc-in associative? atom await await-for await1 bases bean bigdec bigint biginteger binding bit-and bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left bit-shift-right bit-test bit-xor boolean boolean-array booleans bound-fn bound-fn* bound? butlast byte byte-array bytes case cat cast char char-array char-escape-string char-name-string char? chars chunk chunk-append chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? class class? clear-agent-errors clojure-version coll? comment commute comp comparator compare compare-and-set! compile complement completing concat cond condp conj conj! cons constantly construct-proxy contains? count counted? create-ns create-struct cycle dec dec' decimal? declare dedupe default-data-readers definline definterface defmacro defmethod defmulti defn defn- defonce defprotocol defrecord defstruct deftype delay delay? deliver denominator deref derive descendants destructure disj disj! dissoc dissoc! distinct distinct? doall dorun doseq dosync dotimes doto double double-array doubles drop drop-last drop-while eduction empty empty? ensure enumeration-seq error-handler error-mode eval even? every-pred every? ex-data ex-info extend extend-protocol extend-type extenders extends? false? ffirst file-seq filter filterv find find-keyword find-ns find-protocol-impl find-protocol-method find-var first flatten float float-array float? floats flush fn fn? fnext fnil for force format frequencies future future-call future-cancel future-cancelled? future-done? future? gen-class gen-interface gensym get get-in get-method get-proxy-class get-thread-bindings get-validator group-by hash hash-combine hash-map hash-set identical? identity if-let if-not ifn? import in-ns inc inc' init-proxy instance? int int-array integer? interleave intern interpose into into-array ints io! isa? iterate iterator-seq juxt keep keep-indexed key keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list list* list? load load-file load-reader load-string loaded-libs locking long long-array longs loop macroexpand macroexpand-1 make-array make-hierarchy map map-indexed map? mapcat mapv max max-key memfn memoize merge merge-with meta method-sig methods min min-key mod munge name namespace namespace-munge neg? newline next nfirst nil? nnext not not-any? not-empty not-every? not= ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ns-refers ns-resolve ns-unalias ns-unmap nth nthnext nthrest num number? numerator object-array odd? or parents partial partition partition-all partition-by pcalls peek persistent! pmap pop pop! pop-thread-bindings pos? pr pr-str prefer-method prefers primitives-classnames print print-ctor print-dup print-method print-simple print-str printf println println-str prn prn-str promise proxy proxy-call-with-super proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot rand rand-int rand-nth random-sample range ratio? rational? rationalize re-find re-groups re-matcher re-matches re-pattern re-seq read read-line read-string realized? reduce reduce-kv reductions ref ref-history-count ref-max-history ref-min-history ref-set refer refer-clojure reify release-pending-sends rem remove remove-all-methods remove-method remove-ns remove-watch repeat repeatedly replace replicate require reset! reset-meta! resolve rest restart-agent resultset-seq reverse reversible? rseq rsubseq satisfies? second select-keys send send-off seq seq? seque sequence sequential? set set-error-handler! set-error-mode! set-validator! set? short short-array shorts shuffle shutdown-agents slurp some some-fn sort sort-by sorted-map sorted-map-by sorted-set sorted-set-by sorted? special-symbol? spit split-at split-with str string? struct struct-map subs subseq subvec supers swap! symbol symbol? sync take take-last take-nth take-while test the-ns thread-bound? time to-array to-array-2d trampoline transduce transient tree-seq true? type unchecked-add unchecked-add-int unchecked-byte unchecked-char unchecked-dec unchecked-dec-int unchecked-divide-int unchecked-double unchecked-float unchecked-inc unchecked-inc-int unchecked-int unchecked-long unchecked-multiply unchecked-multiply-int unchecked-negate unchecked-negate-int unchecked-remainder-int unchecked-short unchecked-subtract unchecked-subtract-int underive unquote unquote-splicing update update-in update-proxy use val vals var-get var-set var? vary-meta vec vector vector-of vector? volatile! volatile? vreset! vswap! when when-first when-let when-not while with-bindings with-bindings* with-in-str with-loading-context with-local-vars with-meta with-open with-out-str with-precision with-redefs with-redefs-fn xml-seq zero? zipmap *default-data-reader-fn* as-> cond-> cond->> reduced reduced? send-via set-agent-send-executor! set-agent-send-off-executor! some-> some->>");var k=o("ns fn def defn defmethod bound-fn if if-not case condp when while when-not when-first do future comment doto locking proxy with-open with-precision reify deftype defrecord defprotocol extend extend-protocol extend-type try catch let letfn binding loop for doseq dotimes when-let if-let defstruct struct-map assoc testing deftest handler-case handle dotrace deftrace");var w={digit:/\d/,digit_or_colon:/[\d:]/,hex:/[0-9a-f]/i,sign:/[+-]/,exponent:/e/i,keyword_char:/[^\s\(\[\;\)\]]/,symbol:/[\w*+!\-\._?:<>\/\xa1-\uffff]/,block_indent:/^(?:def|with)[^\/]+$|\/(?:def|with)/};function u(y,A,z){this.indent=y;this.type=A;this.prev=z}function t(z,y,A){z.indentStack=new u(y,A,z.indentStack)}function s(y){y.indentStack=y.indentStack.prev}function l(y,z){if(y==="0"&&z.eat(/x/i)){z.eatWhile(w.hex);return true}if((y=="+"||y=="-")&&(w.digit.test(z.peek()))){z.eat(w.sign);y=z.next()}if(w.digit.test(y)){z.eat(y);z.eatWhile(w.digit);if("."==z.peek()){z.eat(".");z.eatWhile(w.digit)}else{if("/"==z.peek()){z.eat("/");z.eatWhile(w.digit)}}if(z.eat(w.exponent)){z.eat(w.sign);z.eatWhile(w.digit)}return true}return false}function i(z){var y=z.next();if(y&&y.match(/[a-z]/)&&z.match(/[a-z]+/,true)){return}if(y==="u"){z.match(/[0-9a-z]{4}/i,true)}}return{startState:function(){return{indentStack:null,indentation:0,mode:false}},token:function(G,F){if(F.indentStack==null&&G.sol()){F.indentation=G.indentation()}if(F.mode!="string"&&G.eatSpace()){return null}var E=null;switch(F.mode){case"string":var D,z=false;while((D=G.next())!=null){if(D=='"'&&!z){F.mode=false;break}z=!z&&D=="\\"}E=v;break;default:var y=G.next();if(y=='"'){F.mode="string";E=v}else{if(y=="\\"){i(G);E=g}else{if(y=="'"&&!(w.digit_or_colon.test(G.peek()))){E=b}else{if(y==";"){G.skipToEnd();E=h}else{if(l(y,G)){E=q}else{if(y=="("||y=="["||y=="{"){var B="",A=G.column(),C;if(y=="("){while((C=G.eat(w.keyword_char))!=null){B+=C}}if(B.length>0&&(k.propertyIsEnumerable(B)||w.block_indent.test(B))){t(F,A+j,y)}else{G.eatSpace();if(G.eol()||G.peek()==";"){t(F,A+p,y)}else{t(F,A+G.current().length,y)}}G.backUp(G.current().length-1);E=d}else{if(y==")"||y=="]"||y=="}"){E=d;if(F.indentStack!=null&&F.indentStack.type==(y==")"?"(":(y=="]"?"[":"{"))){s(F)}}else{if(y==":"){G.eatWhile(w.symbol);return b}else{G.eatWhile(w.symbol);if(n&&n.propertyIsEnumerable(G.current())){E=m}else{if(f&&f.propertyIsEnumerable(G.current())){E=e}else{if(c&&c.propertyIsEnumerable(G.current())){E=b}else{E=x}}}}}}}}}}}}return E},indent:function(y){if(y.indentStack==null){return y.indentation}return y.indentStack.indent},closeBrackets:{pairs:'()[]{}""'},lineComment:";;"}});a.defineMIME("text/x-clojure","clojure");a.defineMIME("text/x-clojurescript","clojure");a.defineMIME("application/edn","clojure")});